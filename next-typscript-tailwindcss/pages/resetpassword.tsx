import type { NextPage, GetStaticProps } from "next";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import imageLoader from "../imageLoader";
import styles from "../styles/Home.module.css";
import formImage from "../public/assets/formicon.png";
import { motion, AnimatePresence } from "framer-motion";
import { useState, useEffect } from "react";
import useAuth from "../hooks/useAuth";
import Joi from "joi-browser";
import AnimatedBorderDiv from "./AnimatedBorderDiv";

const ResetPassword: NextPage = () => {
  const [isAnimating, setIsAnimating] = useState(false);
  const { resetPassword } = useAuth();
  const [errors, setErrors] = useState(null);

  const [formData, setFormData] = useState({
    email: "",
  });

  useEffect(() => {
    setTimeout(() => {
      setErrors(null);
    }, 3000);
  }, [errors]);

  const schema = {
    // Joi schema for validation
    email: Joi.string()
      .email({ minDomainSegments: 2, tlds: { allow: ["com", "net"] } }) // email validation
      .label("Email"),
  };

  const validate = () => {
    // Validation function for Joi schema
    let options = { abortEarly: false }; // abortEarly: false = return all errors
    let { error } = Joi.validate(formData, schema, options); // error = Joi error object
    if (!error) return null; // if no error, return null

    let errors = []; // if error, create an empty array of errors

    for (let item of error.details) {
      // loop through error.details and push each error to the errors array
      errors[item.path[0]] = item.message;
    }
    return errors;
  };

  const handleSubmit = async () => {
    // Function to handle submit
    setErrors(null);
    let data = validate(); // Validation function call
    if (data) {
      // If validation fails
      setErrors(data);
      setIsAnimating(true); // Set isAnimating to true
      setTimeout(() => {
        setIsAnimating(false);
      }, 1500);
    } else {
      // If validation passes
      try {
        await resetPassword(formData.email); // resetPassword function call
      } catch (err) {
        // If sign in fails
        console.log(err);
        setIsAnimating(true); // Set isAnimating to true
        setTimeout(() => {
          setIsAnimating(false);
        }, 1500);
      }
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex justify-center flex-col items-center m-0 bg-slate-400 w-screen h-screen">
        <AnimatePresence initial={false}>
          <motion.div
            variants={{
              hidden: {
                opacity: 1,
              },
              visible: {
                x: isAnimating ? [0, 25, -25, 25, -25, 0] : 0,
                transition: {
                  y: {
                    // yoyo: Infinity,
                    duration: 1.5,
                    ease: "easeOut",
                  },
                },
              },
              removed: {
                opacity: 1,
              },
            }}
            initial="hidden"
            animate="visible"
            exit="removed"
          >
            <AnimatePresence>
              <motion.div
                animate={{
                  // x: [0, 0, 0, -100, -100, 100, 100, 0],
                  // rotate: [0, 45, -45, 45, -45, 0],
                  rotate: 360,
                }}
                initial={{
                  opacity: 1,
                }}
                transition={{
                  type: "spring",
                  stiffness: 50,
                  duration: 1.5,
                }}
                exit={{
                  opacity: 0,
                }}
              >
                <div
                  id="SignIn"
                  className="flex justify-center flex-row items-center  bg-white p-2 shadow-lg rounded-lg"
                >
                  <Image
                    loader={imageLoader}
                    unoptimized
                    src={formImage}
                    alt="Form"
                    width="200"
                    height="200"
                  />

                  <div className="flex flex-col items-start gap-3 mt-3">
                    <div className="flex flex-col">
                      <label htmlFor="email">Email: </label>
                      {isAnimating ? (
                        <AnimatedBorderDiv>
                          <input
                            id="email"
                            name="email"
                            type="email"
                            value={formData.email}
                            placeholder="Enter your Email"
                            onChange={handleChange}
                            className={`w-72 h-7 pl-2 bg-white text-slate-800 text-l z-12 focus:outline-none`}
                          />
                        </AnimatedBorderDiv>
                      ) : (
                        <input
                          id="email"
                          name="email"
                          type="email"
                          value={formData.email}
                          placeholder="Enter your Email"
                          onChange={handleChange}
                          className={`w-72 h-7 pl-2 bg-slate-100 text-slate-800 text-l rounded-t-md z-12 focus:outline-none`}
                        />
                      )}
                    </div>

                    <div className="flex flex-row gap-2 items-center">
                      <button
                        type="submit"
                        className={`bg-blue-800 rounded-sm text-white pl-2 pr-2 pt-1 pb-1 text-sm `}
                        onClick={handleSubmit}
                      >
                        Reset Password
                      </button>
                      <div>or</div>

                      <Link href="/login">
                        <a>
                          <button
                            className={`rounded-sm text-blue-800 pl-2 pr-2 pt-1 pb-1 text-sm`}
                          >
                            Sign in
                          </button>
                        </a>
                      </Link>
                    </div>
                  </div>
                </div>
              </motion.div>
            </AnimatePresence>
          </motion.div>
        </AnimatePresence>
      </main>
    </div>
  );
};

export default ResetPassword;
